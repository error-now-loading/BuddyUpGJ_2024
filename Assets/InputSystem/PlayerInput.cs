//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/Player.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player"",
    ""maps"": [
        {
            ""name"": ""PlayerOverworld"",
            ""id"": ""a4542bfb-c2e5-44ad-8a21-e9e5f68712e0"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""d2b4207a-58f9-423c-9a47-bc75727f9d9d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""4da3939e-c283-4b88-942b-db99c2737c72"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""7d5a378b-ecfe-48a5-b2a9-d487ab8e87cd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Command"",
                    ""type"": ""Button"",
                    ""id"": ""9e6d70e9-5081-4a22-af52-ce9da6306fb9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CastSpell"",
                    ""type"": ""Button"",
                    ""id"": ""f86e89c8-736e-4739-b47e-4bc7ae4e8e54"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpellChangePrev"",
                    ""type"": ""Button"",
                    ""id"": ""9b735201-e80c-4059-82db-e0c2d8db33b0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpellChangeNext"",
                    ""type"": ""Button"",
                    ""id"": ""62bd9c05-2805-4087-a8aa-3e1eb191a6fd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""cc9b2a6e-3dd7-497b-8c34-288c0b4f524b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3d5efa51-cbc1-47c1-8d06-c2c01a011d1e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c14ef8c2-6f79-406f-a65f-f25a4f731512"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0b85f1a8-9a3c-454e-b57f-d9fdc2856948"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fe757fcc-2110-4b61-840f-4b47671fc140"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow Keys"",
                    ""id"": ""035df6bb-8341-44a7-afd8-b2fb153bc83c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f40bcdfc-862d-49d3-828e-1504da38c09e"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""52638419-bbae-4c29-b8e9-8951cd6b25d4"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f198da2a-1f9d-4518-bc92-12d8e2288710"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7e6a61ed-015b-47e8-bc1e-2e15806a166f"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7d1ab4c9-05af-4dc1-87db-e89cf742ba71"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d85d3f79-33ba-4395-bdf0-aeefeb97ebce"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""15816feb-ecd3-4d7f-8877-d40beafa22a3"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9f3fae7b-6ed2-48b4-a620-8ce040243831"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""Command"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ed8f674-2a42-42bf-af30-51a5da84ed2e"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""CastSpell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd17e396-4bb1-4895-b8aa-3dea959e02d7"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpellChangePrev"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1fda2737-6105-45f4-98a5-eaa76c01e7f4"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpellChangeNext"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menus"",
            ""id"": ""c3fff2fd-85db-4c02-9eb4-2243f77dca74"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""babe33eb-c200-4d26-b646-124d79f64580"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0a7770aa-b9f8-4ba2-9c50-4b56ac830fff"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Player"",
            ""bindingGroup"": ""Player"",
            ""devices"": []
        }
    ]
}");
        // PlayerOverworld
        m_PlayerOverworld = asset.FindActionMap("PlayerOverworld", throwIfNotFound: true);
        m_PlayerOverworld_Movement = m_PlayerOverworld.FindAction("Movement", throwIfNotFound: true);
        m_PlayerOverworld_Jump = m_PlayerOverworld.FindAction("Jump", throwIfNotFound: true);
        m_PlayerOverworld_Interact = m_PlayerOverworld.FindAction("Interact", throwIfNotFound: true);
        m_PlayerOverworld_Command = m_PlayerOverworld.FindAction("Command", throwIfNotFound: true);
        m_PlayerOverworld_CastSpell = m_PlayerOverworld.FindAction("CastSpell", throwIfNotFound: true);
        m_PlayerOverworld_SpellChangePrev = m_PlayerOverworld.FindAction("SpellChangePrev", throwIfNotFound: true);
        m_PlayerOverworld_SpellChangeNext = m_PlayerOverworld.FindAction("SpellChangeNext", throwIfNotFound: true);
        // Menus
        m_Menus = asset.FindActionMap("Menus", throwIfNotFound: true);
        m_Menus_Newaction = m_Menus.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerOverworld
    private readonly InputActionMap m_PlayerOverworld;
    private List<IPlayerOverworldActions> m_PlayerOverworldActionsCallbackInterfaces = new List<IPlayerOverworldActions>();
    private readonly InputAction m_PlayerOverworld_Movement;
    private readonly InputAction m_PlayerOverworld_Jump;
    private readonly InputAction m_PlayerOverworld_Interact;
    private readonly InputAction m_PlayerOverworld_Command;
    private readonly InputAction m_PlayerOverworld_CastSpell;
    private readonly InputAction m_PlayerOverworld_SpellChangePrev;
    private readonly InputAction m_PlayerOverworld_SpellChangeNext;
    public struct PlayerOverworldActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerOverworldActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerOverworld_Movement;
        public InputAction @Jump => m_Wrapper.m_PlayerOverworld_Jump;
        public InputAction @Interact => m_Wrapper.m_PlayerOverworld_Interact;
        public InputAction @Command => m_Wrapper.m_PlayerOverworld_Command;
        public InputAction @CastSpell => m_Wrapper.m_PlayerOverworld_CastSpell;
        public InputAction @SpellChangePrev => m_Wrapper.m_PlayerOverworld_SpellChangePrev;
        public InputAction @SpellChangeNext => m_Wrapper.m_PlayerOverworld_SpellChangeNext;
        public InputActionMap Get() { return m_Wrapper.m_PlayerOverworld; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerOverworldActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerOverworldActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerOverworldActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerOverworldActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Command.started += instance.OnCommand;
            @Command.performed += instance.OnCommand;
            @Command.canceled += instance.OnCommand;
            @CastSpell.started += instance.OnCastSpell;
            @CastSpell.performed += instance.OnCastSpell;
            @CastSpell.canceled += instance.OnCastSpell;
            @SpellChangePrev.started += instance.OnSpellChangePrev;
            @SpellChangePrev.performed += instance.OnSpellChangePrev;
            @SpellChangePrev.canceled += instance.OnSpellChangePrev;
            @SpellChangeNext.started += instance.OnSpellChangeNext;
            @SpellChangeNext.performed += instance.OnSpellChangeNext;
            @SpellChangeNext.canceled += instance.OnSpellChangeNext;
        }

        private void UnregisterCallbacks(IPlayerOverworldActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Command.started -= instance.OnCommand;
            @Command.performed -= instance.OnCommand;
            @Command.canceled -= instance.OnCommand;
            @CastSpell.started -= instance.OnCastSpell;
            @CastSpell.performed -= instance.OnCastSpell;
            @CastSpell.canceled -= instance.OnCastSpell;
            @SpellChangePrev.started -= instance.OnSpellChangePrev;
            @SpellChangePrev.performed -= instance.OnSpellChangePrev;
            @SpellChangePrev.canceled -= instance.OnSpellChangePrev;
            @SpellChangeNext.started -= instance.OnSpellChangeNext;
            @SpellChangeNext.performed -= instance.OnSpellChangeNext;
            @SpellChangeNext.canceled -= instance.OnSpellChangeNext;
        }

        public void RemoveCallbacks(IPlayerOverworldActions instance)
        {
            if (m_Wrapper.m_PlayerOverworldActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerOverworldActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerOverworldActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerOverworldActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerOverworldActions @PlayerOverworld => new PlayerOverworldActions(this);

    // Menus
    private readonly InputActionMap m_Menus;
    private List<IMenusActions> m_MenusActionsCallbackInterfaces = new List<IMenusActions>();
    private readonly InputAction m_Menus_Newaction;
    public struct MenusActions
    {
        private @PlayerInput m_Wrapper;
        public MenusActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Menus_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Menus; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenusActions set) { return set.Get(); }
        public void AddCallbacks(IMenusActions instance)
        {
            if (instance == null || m_Wrapper.m_MenusActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenusActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IMenusActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IMenusActions instance)
        {
            if (m_Wrapper.m_MenusActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenusActions instance)
        {
            foreach (var item in m_Wrapper.m_MenusActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenusActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenusActions @Menus => new MenusActions(this);
    private int m_PlayerSchemeIndex = -1;
    public InputControlScheme PlayerScheme
    {
        get
        {
            if (m_PlayerSchemeIndex == -1) m_PlayerSchemeIndex = asset.FindControlSchemeIndex("Player");
            return asset.controlSchemes[m_PlayerSchemeIndex];
        }
    }
    public interface IPlayerOverworldActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnCommand(InputAction.CallbackContext context);
        void OnCastSpell(InputAction.CallbackContext context);
        void OnSpellChangePrev(InputAction.CallbackContext context);
        void OnSpellChangeNext(InputAction.CallbackContext context);
    }
    public interface IMenusActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
